import { Injectable, UnauthorizedException, ExecutionContext, Logger } from '@nestjs/common'
import { AuthGuard } from '@nestjs/passport'

@Injectable()
export class JwtAuthGuard extends AuthGuard('jwt') {
  private readonly logger = new Logger(JwtAuthGuard.name)

  handleRequest(err: any, user: any, info: any, context: ExecutionContext) {
    this.logger.log('üîê B·∫Øt ƒë·∫ßu x√°c th·ª±c')
    this.logger.debug(`L·ªói: ${JSON.stringify(err)}`)
    this.logger.debug(`User: ${JSON.stringify(user)}`)
    this.logger.debug(`Info: ${JSON.stringify(info)}`)

    if (err) {
      if (err.name === 'TokenExpiredError') {
        this.logger.warn('‚õî Token ƒë√£ h·∫øt h·∫°n')
        throw new UnauthorizedException('Token ƒë√£ h·∫øt h·∫°n')
      }
      this.logger.error('‚õî L·ªói x√°c th·ª±c', err.stack)
      throw err
    }

    if (!user) {
      if (info && info.name === 'JsonWebTokenError') {
        this.logger.warn('‚õî Token kh√¥ng h·ª£p l·ªá')
        throw new UnauthorizedException('Token kh√¥ng h·ª£p l·ªá')
      }
      this.logger.warn('‚õî Kh√¥ng x√°c th·ª±c ƒë∆∞·ª£c ng∆∞·ªùi d√πng')
      throw new UnauthorizedException('X√°c th·ª±c ng∆∞·ªùi d√πng kh√¥ng th√†nh c√¥ng')
    }

    this.logger.log('‚úÖ X√°c th·ª±c th√†nh c√¥ng')
    return user
  }
}
